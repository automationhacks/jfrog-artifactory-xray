package backend.e2e.tests;


import static io.automationhacks.backend.core.env.Environment.getPassword;
import static io.automationhacks.backend.core.env.Environment.getUsername;

import backend.e2e.assertion.XrayUIAssertions;
import backend.e2e.flow.ArtifactoryFlow;
import backend.e2e.flow.XrayFlow;
import backend.e2e.helper.TestHelper;

import io.automationhacks.backend.core.env.Environment;
import io.automationhacks.backend.core.utils.StringUtils;
import io.automationhacks.web.core.constant.Browser;
import io.automationhacks.web.core.driver.DriverFactory;
import io.automationhacks.web.domain.page_objects.common.LoadingPage;
import io.automationhacks.web.domain.page_objects.login.LoginPage;
import io.automationhacks.web.domain.page_objects.xray.scans_list.ArtifactsPage;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.Test;

public class VulnerabilityScanByPolicyTest {
    private final Logger logger = LoggerFactory.getLogger(VulnerabilityScanByPolicyTest.class);

    @Test
    public void testVulnerabilityScanByPolicy() {
        String repoKey = "docker-local-%s".formatted(StringUtils.getRandomString());
        new ArtifactoryFlow().createRepositoryInArtifactory(repoKey);

        var testHelper = new TestHelper();

        String dockerImage = "alpine:3.9";
        testHelper.pushImageToRepository(
                repoKey, dockerImage, dockerImage, Environment.getHostName());

        String secPolicyName = "%s_policy".formatted(repoKey);
        var xRayFlow = new XrayFlow();
        xRayFlow.createSecurityPolicy(secPolicyName);

        String watchName = "%s_watch".formatted(repoKey);
        xRayFlow.createWatch(repoKey, watchName, secPolicyName);
        xRayFlow.applyWatchOnPolicy(watchName, -5, 5);

        String artifactPath = "alpine/3.9/manifest.json";
        xRayFlow.checkScanIsDone(repoKey, artifactPath);
        xRayFlow.checkViolationsAreGenerated(repoKey, artifactPath, watchName);
    }

    @Test
    public void testPolicyViolations() throws InterruptedException {
        var repoKey = "docker-local-0bd45";

        var driver = new DriverFactory(Browser.CHROME).getDriver();
        String jFrogUI = Environment.getJFrogUI();
        driver.get(jFrogUI);

        var loadingPage = new LoadingPage(driver);
        loadingPage.waitForAnimationToFinish();

        var loginPage = new LoginPage(driver);
        var loginPageText = loginPage.getLoginPageBanner();

        XrayUIAssertions xrayUIAssertions = new XrayUIAssertions();
        xrayUIAssertions.verifyLoginPageBanner(loginPageText);

        loginPage.waitForLoginPageToLoad();
        loginPage.login(getUsername(), getPassword());

        loadingPage.waitForAnimationToFinish();

        String url = "%s/scans-list/repositories/%s/scan-descendants".formatted(jFrogUI, repoKey);
        driver.get(url);

        var basePath = "alpine/3.9";
        var artifactPath = "%s/alpine/3.9/manifest.json".formatted(basePath);
        var artifactsPage = new ArtifactsPage(driver);
        artifactsPage.clickOnVulnerabilities(artifactPath);

        var severityCounts = artifactsPage.getPolicyViolations();
        xrayUIAssertions.verifyPolicyViolationsBelowHighAreNotReported(severityCounts);

        driver.close();
        driver.quit();
    }
}
