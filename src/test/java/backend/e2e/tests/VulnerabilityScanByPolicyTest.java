package backend.e2e.tests;

import static com.google.common.truth.Truth.assertWithMessage;

import com.google.gson.reflect.TypeToken;

import io.automationhacks.backend.core.object.Serialization;
import io.automationhacks.backend.core.utils.StringUtils;
import io.automationhacks.backend.domain.artifactory.client.repositories.RepositoryClient;
import io.automationhacks.backend.domain.artifactory.model.repositories.CreateRepositoryRequest;
import io.automationhacks.backend.domain.artifactory.model.repositories.get_repositories.GetRepositoriesResponseItem;

import org.testng.annotations.Test;

import java.lang.reflect.Type;
import java.util.List;

public class VulnerabilityScanByPolicyTest {
    @Test
    public void testVulnerabilityScanByPolicy() {
        var repositoryClient = new RepositoryClient();

        String repoKey = "docker-local-%s".formatted(StringUtils.getRandomString());
        var createRepositoryRequest =
                CreateRepositoryRequest.builder()
                        .projectKey("")
                        .rclass("local")
                        .xrayIndex(true)
                        .packageType("docker")
                        .key(repoKey)
                        .build();

        var body = Serialization.serialize(createRepositoryRequest);
        var response = repositoryClient.createRepository(repoKey, body);
        assertWithMessage(
                        "Repository not created successfully for key: %s with response: %s",
                        repoKey, response.getBody())
                .that(response.getStatusCode())
                .isEqualTo(200);

        var repositoriesResponse = repositoryClient.getRepositories();
        assertWithMessage(
                        "Repository not found for key: %s with response: %s",
                        repoKey, repositoriesResponse.getBody())
                .that(repositoriesResponse.getStatusCode())
                .isEqualTo(200);
        Type listType = new TypeToken<List<GetRepositoriesResponseItem>>() {}.getType();
        List<GetRepositoriesResponseItem> repositoriesList =
                Serialization.deserialize(repositoriesResponse.getBody(), listType);
        var repository =
                repositoriesList.stream().filter(t -> t.getKey().equals(repoKey)).findFirst();
        assertWithMessage(
                        "Repository not found for key: %s with response: %s",
                        repoKey, repositoriesResponse.getBody())
                .that(repository.isPresent())
                .isTrue();
    }
}
