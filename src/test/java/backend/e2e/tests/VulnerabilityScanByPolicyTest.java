package backend.e2e.tests;

import static com.google.common.truth.Truth.assertWithMessage;

import static io.automationhacks.backend.core.object.Serialization.serialize;

import backend.e2e.assertion.RepositoryAssertion;
import backend.e2e.assertion.XrayAssertion;
import backend.e2e.helper.TestHelper;

import io.automationhacks.backend.core.constants.DateTimeConstants;
import io.automationhacks.backend.core.utils.DateTimeUtils;
import io.automationhacks.backend.core.utils.StringUtils;
import io.automationhacks.backend.domain.artifactory.client.repositories.RepositoryClient;
import io.automationhacks.backend.domain.artifactory.model.repositories.CreateRepositoryRequest;
import io.automationhacks.backend.domain.xray.client.XrayClient;
import io.automationhacks.backend.domain.xray.model.apply_watch.ApplyWatchRequestBuilder;
import io.automationhacks.backend.domain.xray.model.create_security_policy.CreateSecurityPolicyRequestBuilder;
import io.automationhacks.backend.domain.xray.model.create_watch.CreateWatchRequestBuilder;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.Test;

public class VulnerabilityScanByPolicyTest {
    private final Logger logger = LoggerFactory.getLogger(VulnerabilityScanByPolicyTest.class);

    @Test
    public void testVulnerabilityScanByPolicy() {
        var repositoryClient = new RepositoryClient();

        String repoKey = "docker-local-%s".formatted(StringUtils.getRandomString());
        logger.info("Creating repository with key: %s".formatted(repoKey));

        var createRepositoryRequest =
                CreateRepositoryRequest.builder()
                        .projectKey("")
                        .rclass("local")
                        .xrayIndex(true)
                        .packageType("docker")
                        .key(repoKey)
                        .build();

        var body = serialize(createRepositoryRequest);
        var response = repositoryClient.createRepository(repoKey, body);
        var repositoryAssertion = new RepositoryAssertion();
        repositoryAssertion.verifyRepositoryIsCreated(repoKey, response);

        var repositoriesResponse = repositoryClient.getRepositories();
        repositoryAssertion.verifyLocalRepositoryIsPresent(repoKey, repositoriesResponse);

        new TestHelper().pushImageToRepository(repoKey, "alpine:3.9");

        var xRayClient = new XrayClient();
        String secPolicyName = "%s_policy".formatted(repoKey);
        var createSecurityPolicyRequest =
                new CreateSecurityPolicyRequestBuilder()
                        .withNameDescription(
                                secPolicyName, "Security policy with min severity as high")
                        .build();
        var createSecurityPolicyResponse =
                xRayClient.createSecurityPolicy(serialize(createSecurityPolicyRequest));

        var xrayAssertion = new XrayAssertion();
        xrayAssertion.verifySecurityPolicyIsCreated(createSecurityPolicyResponse);

        String watchName = "%s_watch".formatted(repoKey);
        var createWatchRequest =
                new CreateWatchRequestBuilder()
                        .withWatchAndPolicyName(watchName, secPolicyName)
                        .build();
        var createWatchResponse = xRayClient.createWatch(serialize(createWatchRequest));
        xrayAssertion.verifyWatchIsCreated(createWatchResponse);

        var applyWatchRequest =
                new ApplyWatchRequestBuilder()
                        .withWatchName(watchName)
                        .withDates(
                                DateTimeUtils.getDateTime(-5, DateTimeConstants.DATE_TIME_FORMAT),
                                DateTimeUtils.getDateTime(0, DateTimeConstants.DATE_TIME_FORMAT))
                        .build();
        var applyWatchResponse = xRayClient.applyWatch(serialize(applyWatchRequest));
        assertWithMessage(
                        "Apply watch failed with status code %s and response %s"
                                .formatted(
                                        applyWatchResponse.getStatusCode(),
                                        applyWatchResponse.getBody()))
                .that(applyWatchResponse.getStatusCode())
                .isEqualTo(202);
    }

    @Test
    public void experiment() {
        var repoKey = "docker-local-56a63";
    }
}
